// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesIoasys.Infra.Data.Sql;

namespace MoviesIoasys.Infra.Data.Sql.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210718052154_Seed")]
    partial class Seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aecd9fdc-c732-4066-a620-c83d931e6893"),
                            Name = "Leonardo DI Caprio"
                        },
                        new
                        {
                            Id = new Guid("b73b3d56-ce9a-4644-a339-aaf96f26a3ad"),
                            Name = "Morgan Freeman"
                        },
                        new
                        {
                            Id = new Guid("0a9d5004-3c5e-4e70-bda9-26cf5310476c"),
                            Name = "Robert De Niro"
                        });
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.ActorMovie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("ActorMovies");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92bad319-e3d1-4818-ab99-57bfdaa68ab4"),
                            Name = "Ação"
                        },
                        new
                        {
                            Id = new Guid("54fdf761-83c3-4362-b0fd-8069b49d8313"),
                            Name = "Comédia"
                        },
                        new
                        {
                            Id = new Guid("8eb9f73f-4530-497b-95ce-56ba59556564"),
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91d89dbf-4099-4f8f-b48f-f57cdabcf773"),
                            Name = "Howard Hawks"
                        },
                        new
                        {
                            Id = new Guid("636303b9-2906-4f40-8b52-92cdbb687b00"),
                            Name = "Martin Scorsese"
                        },
                        new
                        {
                            Id = new Guid("7dd08154-4793-496e-82cd-e2640edfff82"),
                            Name = "Sidney Lumet"
                        });
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Actor", b =>
                {
                    b.HasOne("MoviesIoasys.Domain.Entities.Movie", null)
                        .WithMany("Cast")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.ActorMovie", b =>
                {
                    b.HasOne("MoviesIoasys.Domain.Entities.Actor", "Actor")
                        .WithMany("ActorMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesIoasys.Domain.Entities.Movie", "Movie")
                        .WithMany("ActorMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Movie", b =>
                {
                    b.HasOne("MoviesIoasys.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesIoasys.Domain.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Vote", b =>
                {
                    b.HasOne("MoviesIoasys.Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Actor", b =>
                {
                    b.Navigation("ActorMovies");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MoviesIoasys.Domain.Entities.Movie", b =>
                {
                    b.Navigation("ActorMovies");

                    b.Navigation("Cast");
                });
#pragma warning restore 612, 618
        }
    }
}
